// Code generated by wunderctl. DO NOT EDIT.

import type {
	CreateOrderResponse,
	CreateOrderInput,
	CreateOrderResponseData,
	CreateSectionResponse,
	CreateSectionInput,
	CreateSectionResponseData,
	CreateTaskResponse,
	CreateTaskInput,
	CreateTaskResponseData,
	DeleteOrderResponse,
	DeleteOrderInput,
	DeleteOrderResponseData,
	DeleteSectionResponse,
	DeleteSectionInput,
	DeleteSectionResponseData,
	DeleteTaskResponse,
	DeleteTaskInput,
	DeleteTaskResponseData,
	GetAllOrdersResponse,
	GetAllOrdersResponseData,
	GetOrdersResponse,
	GetOrdersInput,
	GetOrdersResponseData,
	GetSectionsResponse,
	GetSectionsResponseData,
	GetTasksResponse,
	GetTasksInput,
	GetTasksResponseData,
	UpdateOrderResponse,
	UpdateOrderInput,
	UpdateOrderResponseData,
	UpdateSectionResponse,
	UpdateSectionInput,
	UpdateSectionResponseData,
	UpdateTaskResponse,
	UpdateTaskInput,
	UpdateTaskResponseData,
} from "./models";
import { createContext } from "react";
import {
	QueryArgsWithInput,
	SubscriptionArgs,
	SubscriptionArgsWithInput,
	hooks,
	WunderGraphContextProperties,
	Client,
} from "@wundergraph/nextjs";

export type Role = "admin" | "user";

const defaultWunderGraphContextProperties: WunderGraphContextProperties<Role> = {
	ssrCache: {},
	client: null,
	clientConfig: {
		applicationHash: "65d11d55",
		applicationPath: "app/main",
		baseURL: "http://localhost:9991",
		sdkVersion: "0.96.1",
		authenticationEnabled: false,
	},
	user: null,
	setUser: (value) => {},
	isWindowFocused: "pristine",
	setIsWindowFocused: (value) => {},
	refetchMountedOperations: 0,
	setRefetchMountedOperations: (value) => {},
};

export const WunderGraphContext = createContext<WunderGraphContextProperties<Role>>(
	defaultWunderGraphContextProperties
);

export const withWunderGraph = hooks.withWunderGraphContextWrapper(
	WunderGraphContext,
	defaultWunderGraphContextProperties
);

export const useWunderGraph = hooks.useWunderGraph<Role, "">(WunderGraphContext);

export const useQuery = {
	GetOrders: (args: QueryArgsWithInput<GetOrdersInput>) =>
		hooks.useQueryWithInput<GetOrdersInput, GetOrdersResponseData, Role>(WunderGraphContext, {
			operationName: "GetOrders",
			requiresAuthentication: false,
		})(args),
	GetTasks: (args: QueryArgsWithInput<GetTasksInput>) =>
		hooks.useQueryWithInput<GetTasksInput, GetTasksResponseData, Role>(WunderGraphContext, {
			operationName: "GetTasks",
			requiresAuthentication: false,
		})(args),
	GetAllOrders: hooks.useQueryWithoutInput<GetAllOrdersResponseData, Role>(WunderGraphContext, {
		operationName: "GetAllOrders",
		requiresAuthentication: false,
	}),
	GetSections: hooks.useQueryWithoutInput<GetSectionsResponseData, Role>(WunderGraphContext, {
		operationName: "GetSections",
		requiresAuthentication: false,
	}),
};

export const useMutation = {
	CreateOrder: () =>
		hooks.useMutationWithInput<CreateOrderInput, CreateOrderResponseData, Role>(WunderGraphContext, {
			operationName: "CreateOrder",
			requiresAuthentication: false,
		}),
	CreateSection: () =>
		hooks.useMutationWithInput<CreateSectionInput, CreateSectionResponseData, Role>(WunderGraphContext, {
			operationName: "CreateSection",
			requiresAuthentication: false,
		}),
	CreateTask: () =>
		hooks.useMutationWithInput<CreateTaskInput, CreateTaskResponseData, Role>(WunderGraphContext, {
			operationName: "CreateTask",
			requiresAuthentication: false,
		}),
	DeleteOrder: () =>
		hooks.useMutationWithInput<DeleteOrderInput, DeleteOrderResponseData, Role>(WunderGraphContext, {
			operationName: "DeleteOrder",
			requiresAuthentication: false,
		}),
	DeleteSection: () =>
		hooks.useMutationWithInput<DeleteSectionInput, DeleteSectionResponseData, Role>(WunderGraphContext, {
			operationName: "DeleteSection",
			requiresAuthentication: false,
		}),
	DeleteTask: () =>
		hooks.useMutationWithInput<DeleteTaskInput, DeleteTaskResponseData, Role>(WunderGraphContext, {
			operationName: "DeleteTask",
			requiresAuthentication: false,
		}),
	UpdateOrder: () =>
		hooks.useMutationWithInput<UpdateOrderInput, UpdateOrderResponseData, Role>(WunderGraphContext, {
			operationName: "UpdateOrder",
			requiresAuthentication: false,
		}),
	UpdateSection: () =>
		hooks.useMutationWithInput<UpdateSectionInput, UpdateSectionResponseData, Role>(WunderGraphContext, {
			operationName: "UpdateSection",
			requiresAuthentication: false,
		}),
	UpdateTask: () =>
		hooks.useMutationWithInput<UpdateTaskInput, UpdateTaskResponseData, Role>(WunderGraphContext, {
			operationName: "UpdateTask",
			requiresAuthentication: false,
		}),
};

export const useSubscription = {};

export const useLiveQuery = {
	GetOrders: (args: SubscriptionArgsWithInput<GetOrdersInput>) =>
		hooks.useSubscriptionWithInput<GetOrdersInput, GetOrdersResponseData, Role>(WunderGraphContext, {
			operationName: "GetOrders",
			isLiveQuery: true,
			requiresAuthentication: false,
		})(args),
	GetTasks: (args: SubscriptionArgsWithInput<GetTasksInput>) =>
		hooks.useSubscriptionWithInput<GetTasksInput, GetTasksResponseData, Role>(WunderGraphContext, {
			operationName: "GetTasks",
			isLiveQuery: true,
			requiresAuthentication: false,
		})(args),
	GetAllOrders: (args?: SubscriptionArgs) =>
		hooks.useSubscriptionWithoutInput<GetAllOrdersResponseData, Role>(WunderGraphContext, {
			operationName: "GetAllOrders",
			isLiveQuery: true,
			requiresAuthentication: false,
		})(args),
	GetSections: (args?: SubscriptionArgs) =>
		hooks.useSubscriptionWithoutInput<GetSectionsResponseData, Role>(WunderGraphContext, {
			operationName: "GetSections",
			isLiveQuery: true,
			requiresAuthentication: false,
		})(args),
};
