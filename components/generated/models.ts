// Code generated by wunderctl. DO NOT EDIT.

export interface CreateOrderInput {
	id: number;
	order: string;
}

export interface CreateSectionInput {
	title: string;
}

export interface CreateTaskInput {
	title: string;
	content: string;
	status: number;
}

export interface DeleteOrderInput {
	id: number;
}

export interface DeleteSectionInput {
	id: number;
}

export interface DeleteTaskInput {
	id: number;
}

export interface GetOrdersInput {
	id: db_IntFilter;
}

export interface GetTasksInput {
	status: db_IntFilter;
}

export interface UpdateOrderInput {
	id: number;
	order?: db_StringFieldUpdateOperationsInput;
}

export interface UpdateSectionInput {
	id: number;
	title?: db_StringFieldUpdateOperationsInput;
}

export interface UpdateTaskInput {
	id: number;
	title?: db_StringFieldUpdateOperationsInput;
	content?: db_StringFieldUpdateOperationsInput;
	status?: db_IntFieldUpdateOperationsInput;
}

export interface CreateOrderResponse {
	data?: CreateOrderResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface CreateSectionResponse {
	data?: CreateSectionResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface CreateTaskResponse {
	data?: CreateTaskResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface DeleteOrderResponse {
	data?: DeleteOrderResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface DeleteSectionResponse {
	data?: DeleteSectionResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface DeleteTaskResponse {
	data?: DeleteTaskResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface GetAllOrdersResponse {
	data?: GetAllOrdersResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface GetOrdersResponse {
	data?: GetOrdersResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface GetSectionsResponse {
	data?: GetSectionsResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface GetTasksResponse {
	data?: GetTasksResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface UpdateOrderResponse {
	data?: UpdateOrderResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface UpdateSectionResponse {
	data?: UpdateSectionResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface UpdateTaskResponse {
	data?: UpdateTaskResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface CreateOrderResponseData {
	db_createOneOrder?: {
		id: number;
		order: string;
	};
}

export interface CreateSectionResponseData {
	db_createOneSection?: {
		id: number;
	};
}

export interface CreateTaskResponseData {
	db_createOneTask?: {
		id: number;
	};
}

export interface DeleteOrderResponseData {
	db_deleteOneOrder?: {
		id: number;
	};
}

export interface DeleteSectionResponseData {
	db_deleteOneSection?: {
		id: number;
	};
}

export interface DeleteTaskResponseData {
	db_deleteOneTask?: {
		id: number;
	};
}

export interface GetAllOrdersResponseData {
	db_findManyOrder: {
		id: number;
		order: string;
		createdAt: string;
		updatedAt: string;
	}[];
}

export interface GetOrdersResponseData {
	db_findManyOrder: {
		id: number;
		order: string;
	}[];
}

export interface GetSectionsResponseData {
	db_findManySection: {
		id: number;
		title: string;
		createdAt: string;
		updatedAt: string;
	}[];
}

export interface GetTasksResponseData {
	db_findManyTask: {
		id: number;
		title: string;
		content: string;
		status: number;
		createdAt: string;
		updatedAt: string;
	}[];
}

export interface UpdateOrderResponseData {
	db_updateOneOrder?: {
		id: number;
		order: string;
	};
}

export interface UpdateSectionResponseData {
	db_updateOneSection?: {
		id: number;
		title: string;
	};
}

export interface UpdateTaskResponseData {
	db_updateOneTask?: {
		id: number;
		title: string;
		content: string;
		status: number;
	};
}

export interface db_IntFilter {
	equals?: number;
	in?: number[];
	notIn?: number[];
	lt?: number;
	lte?: number;
	gt?: number;
	gte?: number;
	not?: db_NestedIntFilter;
}

export interface db_NestedIntFilter {
	equals?: number;
	in?: number[];
	notIn?: number[];
	lt?: number;
	lte?: number;
	gt?: number;
	gte?: number;
	not?: db_NestedIntFilter;
}

export interface db_StringFieldUpdateOperationsInput {
	set?: string;
}

export interface db_IntFieldUpdateOperationsInput {
	set?: number;
	increment?: number;
	decrement?: number;
	multiply?: number;
	divide?: number;
}

export type JSONValue = string | number | boolean | JSONObject | Array<JSONValue>;

export type JSONObject = { [key: string]: JSONValue };

export interface GraphQLError {
	message: string;
	path?: ReadonlyArray<string | number>;
}
